step "approve-production-release" {
    condition = "Variable"
    name = "Approve Production Release"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{unless Octopus.Deployment.Trigger.Id}True#{/unless}"
    }

    action {
        action_type = "Octopus.Manual"
        environments = ["production"]
        is_required = true
        notes = "Require approval from someone with the appropriate permissions."
        properties = {
            Octopus.Action.Manual.BlockConcurrentDeployments = "True"
            Octopus.Action.Manual.Instructions = "Please provide approval notes."
            Octopus.Action.Manual.ResponsibleTeamIds = "global/demo-presenters"
            Octopus.Action.RunOnServer = "false"
        }
    }
}

step "deploy-database-changes" {
    name = "Deploy Database Changes"

    action {
        action_type = "Octopus.Script"
        notes = "Deploy database changes using a [Worker](https://octopus.com/docs/infrastructure/workers) and [DbUp](https://dbup.readthedocs.io/en/latest/)."
        properties = {
            Octopus.Action.EnabledFeatures = "Octopus.Features.ConfigurationVariables"
            Octopus.Action.Package.AutomaticallyUpdateAppSettingsAndConnectionStrings = "True"
            Octopus.Action.Package.DownloadOnTentacle = "False"
            Octopus.Action.Package.FeedId = "azure-devops-artifacts"
            Octopus.Action.Package.PackageId = "OctoFX.Database"
            Octopus.Action.Script.ScriptFileName = "Deploy.ps1"
            Octopus.Action.Script.ScriptSource = "Package"
        }
        worker_pool_variable = "OctoFX.WorkerPool"

        packages {
            acquisition_location = "Server"
            feed = "azure-devops-artifacts"
            package_id = "OctoFX.Database"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }
}

step "deploy-rate-service" {
    name = "Deploy Legacy Rate Service"
    properties = {
        Octopus.Action.TargetRoles = "octofx-service"
    }

    action {
        action_type = "Octopus.WindowsService"
        notes = "Deploy a Windows Service to a VM in Azure."
        properties = {
            Octopus.Action.EnabledFeatures = ",Octopus.Features.WindowsService,Octopus.Features.ConfigurationTransforms,Octopus.Features.ConfigurationVariables"
            Octopus.Action.Package.AutomaticallyRunConfigurationTransformationFiles = "True"
            Octopus.Action.Package.AutomaticallyUpdateAppSettingsAndConnectionStrings = "True"
            Octopus.Action.Package.DownloadOnTentacle = "False"
            Octopus.Action.Package.FeedId = "azure-devops-artifacts"
            Octopus.Action.Package.PackageId = "OctoFX.RateService"
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.WindowsService.CreateOrUpdateService = "True"
            Octopus.Action.WindowsService.Description = "OctoFX Rate Service"
            Octopus.Action.WindowsService.DesiredStatus = "Default"
            Octopus.Action.WindowsService.DisplayName = "OctoFX Rate Service"
            Octopus.Action.WindowsService.ExecutablePath = "OctoFX.RateService.exe"
            Octopus.Action.WindowsService.ServiceAccount = "LocalSystem"
            Octopus.Action.WindowsService.ServiceName = "OctoFX-Rate-Service"
            Octopus.Action.WindowsService.StartMode = "auto"
        }
        worker_pool_variable = ""

        packages {
            acquisition_location = "Server"
            feed = "azure-devops-artifacts"
            package_id = "OctoFX.RateService"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }
}

step "deploy-modern-frontend" {
    name = "Deploy Modern Frontend"
    properties = {
        Octopus.Action.TargetRoles = "demo-k8s-cluster"
    }

    action {
        action_type = "Octopus.KubernetesDeployRawYaml"
        properties = {
            Octopus.Action.Kubernetes.DeploymentTimeout = "180"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.Kubernetes.ServerSideApply.Enabled = "True"
            Octopus.Action.Kubernetes.ServerSideApply.ForceConflicts = "True"
            Octopus.Action.KubernetesContainers.CustomResourceYaml = <<-EOT
                apiVersion: v1
                kind: Service
                metadata:
                  name: '#{OctoFx.WebApp.ServiceName}'
                  namespace: '#{OctoFx.Cluster.Namespace}'
                spec:
                  type: LoadBalancer
                  ports:
                    - name: http
                      port: 80
                      targetPort: #{OctoFx.WebApp.HttpPort}
                      protocol: TCP
                    - name: https
                      port: 443
                      targetPort: #{OctoFx.WebApp.HttpsPort}
                      protocol: TCP
                  selector:
                    component: g-web
                    type: main
                
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
        }
        worker_pool_variable = ""
    }
}

step "send-completion-notification" {
    condition = "Variable"
    name = "Send Completion Notification"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{unless Octopus.Deployment.Trigger.Id}True#{/unless}"
    }

    action {
        action_type = "Octopus.Email"
        environments = ["production"]
        notes = "Email the deployer that the deployment has been completed."
        properties = {
            Octopus.Action.Email.Body = "#{Octopus.Release.Notes}"
            Octopus.Action.Email.IsHtml = "True"
            Octopus.Action.Email.Subject = "Release #{Octopus.Release.Number} has been deployed to #{Octopus.Environment.Name}"
            Octopus.Action.Email.To = "#{Octopus.Deployment.CreatedBy.EmailAddress}"
            Octopus.Action.RunOnServer = "false"
        }
    }
}